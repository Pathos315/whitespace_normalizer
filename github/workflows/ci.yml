name: Continuous Integration

on:
  push:
    branches: [main, master, development]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install

      - name: Run tests
        run: |
          poetry run pytest tests/ -v

      - name: Lint with flake8
        run: |
          poetry add --dev flake8
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        run: |
          poetry add --dev black
          poetry run black --check .

      - name: Type check with mypy
        run: |
          poetry add --dev mypy types-pyperclip
          poetry run mypy src

  build:
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Build package
        run: |
          poetry build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Build executable with PyInstaller
        run: |
          poetry add --dev pyinstaller
          poetry run pyinstaller --onefile --windowed --name WhitespaceNormalizer --icon=resources/icon.ico main.py

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: WhitespaceNormalizer
          path: dist/WhitespaceNormalizer.exe

  release:
    runs-on: windows-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: WhitespaceNormalizer
          path: ./executable

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./executable/WhitespaceNormalizer.exe
          draft: false
          prerelease: false
          name: Release ${{ github.ref_name }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
